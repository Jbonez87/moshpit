import React, { Component } from 'react';
import {
  connect
} from 'react-redux';
import {
  Link
} from 'react-router-dom';

import Loading from './Loading';
import SearchForm from './SearchForm';

import '../static/css/concerts.css';
import placeHolder from '../static/images/placeholder.jpg';
import {
  formatDate
} from '../utils';
class Home extends Component {
  handleImageError = e => {
    e.target.src = placeHolder;
  }
  render() {
    /**
     * This is the loading state and concerts object generated by concertsReducer
     * when FETCHING_CONCERTS and FETCHING_CONCERTS_RESOLVED are dispatched
     */
    const {
      isLoading,
      concerts
    } = this.props;

    /**
     * Checks for network or custom error messages from concertsReducer
     */
    const error = this.props.error ? <p className="error">{this.props.error}</p> : '';

    /**
     * This checks to make sure that the _embedded object and events array
     * are defined in the concerts object
     */
    const concertsMap = (concerts.events) ? Object.values(concerts.events).map(({
          id,
          name,
          images,
          url,
          dates: {
            start: {
              localDate
            }
          },
          sales: {
            public: {
              startDateTime
            }
          }
        }) => (
      <div
        key={id}
        className="event-item"
      >
        <h2>{name}</h2>
        <Link
          to={`/concerts/${id}`}
        >
          <img
            className="event-image"
            src={images[0].url}
            onError={this.handleError}
          />
        </Link>
        <p>Show Date: {formatDate(localDate)}</p>
        <p>Sale Date: {formatDate(startDateTime)}</p>
        <a
          className="ticket-container"
          href={url}
          rel="noopener noreferrer"
          target="_blank"
        >
          Buy Tickets
        </a>
      </div>
    )) : '';

    return (
      <div>
        <SearchForm />
        <div>
          {
            error
          } 
          {
            isLoading ? <Loading /> : ''
          } 
          {
            concertsMap
          }
        </div>
      </div>
    );
  }
}

const mapStateToProps = (state, props) => ({
  concerts: state.concertsReducer.concerts,
  isLoading: state.concertsReducer.isLoading,
  error: state.concertsReducer.error
});

export default connect(mapStateToProps, null)(Home);