import React, { Component } from 'react';
import {
  connect
} from 'react-redux';

import '../static/css/concerts.css';

import loadingGif from '../static/images/heavylogointrohorizonatal_done.gif';

import {
  fetchConcertsByCity,
  fetchConcertsByZip
} from '../actions';

class Home extends Component {
  state = {
    query: ''
  }
  handleChange = e => {
    e.persist();
    this.setState(() => ({
      [e.target.id]: e.target.value
    }));
  }
  handleSubmit = e => {
    e.preventDefault();
    const {
      query
    } = this.state;
    
    if(!query) return;
    // Uses the query to determine which search should be performed
    if(isNaN(query)) {
      this.props.fetchConcertsByCity(encodeURIComponent(query))
    } else {
      this.props.fetchConcertsByZip(encodeURIComponent(query));
    }  
  }
  render() {
    // user input
    const {
      query
    } = this.state;

    /**
     * This is the loading state and concerts object generated by concertsReducer
     * when FETCHING_CONCERTS and FETCHING_CONCERTS_RESOLVED are dispatched
     */
    const {
      isLoading,
      concerts
    } = this.props;

    /**
     * Checks for network or custom error messages from concertsReducer
     */
    const error = this.props.error ? <p>{this.props.error}</p> : '';

    /**
     * This checks to make sure that the _embedded object and events array
     * are defined in the concerts object
     */
    const concertsMap = (concerts._embedded && concerts._embedded.events) ? concerts._embedded.events.map(({ id, name }) => (
      <div
        key={id}
      >
        <p>{name}</p>
      </div>
    )) : '';

    return (
      <div>
        <div
          className="form-wrapper"
        >
          <form
            onSubmit={this.handleSubmit}
          >
          <input 
            id="query"
            type="text"
            value={query}
            placeholder="Search by zip code or by city"
            onChange={this.handleChange}
          />
          <input 
            type="submit"
            value="Go"
          />
          </form>
        </div>
        <div>
          {
            error
          } 
          {
            isLoading ? <img
              className="loading" 
              src={loadingGif}
              alt="Loading..."
            /> : ''
          } 
          {
            concertsMap
          }
        </div>
      </div>
    );
  }
}

const mapStateToProps = (state, props) => ({
  concerts: state.concertsReducer.concerts,
  isLoading: state.concertsReducer.isLoading,
  error: state.concertsReducer.error
});

const mapDispatchToProps = dispatch => ({
  fetchConcertsByZip(query) {
    dispatch(fetchConcertsByZip(query));
  },
  fetchConcertsByCity(query) {
    dispatch(fetchConcertsByCity(query))
  }
})

export default connect(mapStateToProps, mapDispatchToProps)(Home);